const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const authRoutes = require('./routes/auth');
const appraisalRoutes = require('./routes/appraisal');
const appointmentRoutes = require('./routes/appointment');
const pdfRoutes = require('./routes/pdf');
const leadRoutes = require('./routes/lead');
const aiRoutes = require('./routes/ai');
const googleRoutes = require('./routes/google');

const app = express();
const PORT = process.env.PORT || 3000;

// ❶ 先にhelmet/corsだけ（←OK）
app.use(helmet());
app.use(cors());

// LINE Bot設定
const line = require('@line/bot-sdk');
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};
const lineClient = (lineConfig.channelAccessToken && lineConfig.channelSecret)
  ? new line.Client(lineConfig)
  : null;

// リッチメニュー設定
async function setupRichMenu() {
  if (!lineClient) return;
  
  try {
    // 既存のリッチメニューを削除
    const existingMenus = await lineClient.getRichMenuList();
    for (const menu of existingMenus) {
      await lineClient.deleteRichMenu(menu.richMenuId);
    }
    
    // 新しいリッチメニューを作成
    const richMenu = {
      size: {
        width: 2500,
        height: 843
      },
      selected: false,
      name: "不動産査定システム",
      chatBarText: "メニュー",
      areas: [
        {
          bounds: {
            x: 0,
            y: 0,
            width: 625,
            height: 843
          },
          action: {
            type: "message",
            text: "🏠 査定開始"
          }
        },
        {
          bounds: {
            x: 625,
            y: 0,
            width: 625,
            height: 843
          },
          action: {
            type: "message",
            text: "📅 相談予約"
          }
        },
        {
          bounds: {
            x: 1250,
            y: 0,
            width: 625,
            height: 843
          },
          action: {
            type: "message",
            text: "ℹ️ ヘルプ"
          }
        },
        {
          bounds: {
            x: 1875,
            y: 0,
            width: 625,
            height: 843
          },
          action: {
            type: "message",
            text: "🔄 やり直し"
          }
        }
      ]
    };
    
    const richMenuId = await lineClient.createRichMenu(richMenu);
    await lineClient.setDefaultRichMenu(richMenuId);
    console.log('✅ リッチメニューが設定されました');
    
  } catch (error) {
    console.error('❌ リッチメニュー設定エラー:', error);
  }
}

// ❸ /webhook は body-parser より"先"に定義する
if (lineClient) {
  app.post('/webhook', line.middleware(lineConfig), async (req, res) => {
    // 検証（events: []）でも 200 を即返す
    if (!req.body.events || req.body.events.length === 0) {
      console.log('📱 LINE Webhook ping (empty events)');
      return res.status(200).end();
    }

    try {
      await Promise.all(req.body.events.map(handleEvent));
      return res.status(200).end(); // 200固定でOK
    } catch (err) {
      console.error('LINE Bot error:', err);
      // エラーでも200で終わらせると再送ループを避けられる
      return res.status(200).end();
    }
  });

  // ユーザーセッション管理
  const userSessions = new Map();

  async function handleEvent(event) {
    if (event.type === 'message' && event.message.type === 'text') {
      const userMessage = event.message.text;
      const userId = event.source.userId;
      console.log(`📱 LINE受信: ${userId} -> ${userMessage}`);

      try {
        const response = await handleConversation(userId, userMessage);
        // 文字列の場合はテキストメッセージとして送信
        const message = typeof response === 'string' 
          ? { type: 'text', text: response }
          : response;
        return lineClient.replyMessage(event.replyToken, message);
      } catch (error) {
        console.error('LINE Bot処理エラー:', error);
        return lineClient.replyMessage(event.replyToken, { 
          type: 'text', 
          text: '申し訳ございません。処理中にエラーが発生しました。もう一度お試しください。' 
        });
      }
    }
    return Promise.resolve(null);
  }

  // 会話フローの管理
  async function handleConversation(userId, userMessage) {
    let session = userSessions.get(userId);
    
    // セッションが存在しない場合は初期化
    if (!session) {
      session = {
        step: 'welcome',
        data: {},
        lastActivity: Date.now()
      };
      userSessions.set(userId, session);
    }
    
    // セッションタイムアウトチェック（30分）
    if (Date.now() - session.lastActivity > 30 * 60 * 1000) {
      session = {
        step: 'welcome',
        data: {},
        lastActivity: Date.now()
      };
      userSessions.set(userId, session);
    }
    
    // 最後のアクティビティを更新
    session.lastActivity = Date.now();
    
    console.log(`🤖 会話ステップ: ${session.step}, メッセージ: ${userMessage}`);
    console.log(`📊 セッションデータ:`, session.data);

    try {
      switch (session.step) {
        case 'welcome':
          return handleWelcomeStep(userId, userMessage, session);
        
        case 'address':
          return handleAddressStep(userId, userMessage, session);
        
        case 'area':
          return handleAreaStep(userId, userMessage, session);
        
        case 'age':
          return handleAgeStep(userId, userMessage, session);
        
        case 'purpose':
          return handlePurposeStep(userId, userMessage, session);
        
        case 'name_input':
          return handleNameInputStep(userId, userMessage, session);
        
        case 'phone_input':
          return handlePhoneInputStep(userId, userMessage, session);
        
        case 'email_input':
          return handleEmailInputStep(userId, userMessage, session);
        
        case 'personal_info':
          return handlePersonalInfoStep(userId, userMessage, session);
        
        case 'result':
          return handleResultStep(userId, userMessage, session);
        
        case 'detailed_view':
          return handleDetailedViewStep(userId, userMessage, session);
        
        case 'next_action':
          return handleNextActionStep(userId, userMessage, session);
        
        case 'appointment':
          return handleAppointmentStep(userId, userMessage, session);
        
        case 'followup_setting':
          return handleFollowupSettingStep(userId, userMessage, session);
        
        default:
          session.step = 'welcome';
          return handleWelcomeStep(userId, userMessage, session);
      }
    } catch (error) {
      console.error('会話処理エラー:', error);
      return '申し訳ございません。エラーが発生しました。もう一度お試しください。';
    }
  }

  // 名前入力ステップ
  function handleNameInputStep(userId, message, session) {
    if (message.includes('やり直し')) {
      session.step = 'purpose';
      return `🎯 用途を教えていただけますか？

以下のいずれかからお選びください：
• 売却
• 購入
• 賃貸

どのような目的で査定をご希望でしょうか？`;
    }
    
    if (message.length < 2) {
      return `👤 もう少し詳しいお名前を教えていただけますか？

例：山田太郎、佐藤花子

もう少し詳しく教えていただけると助かります。`;
    }
    
    // 名前を保存して次のステップに進む
    session.data.name = message;
    session.step = 'phone_input';
    userSessions.set(userId, session);
    
    console.log(`✅ 名前保存: ${message}, セッション更新: name_input → phone_input`);
    
    return `📱 次に**電話番号**を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

電話番号をお教えください。`;
  }

  // 電話番号入力ステップ
  function handlePhoneInputStep(userId, message, session) {
    if (message.includes('やり直し')) {
      session.step = 'name_input';
      return `👤 お名前を教えていただけますか？

例：山田太郎、佐藤花子

お名前をお教えください。`;
    }
    
    // 電話番号の形式チェック（簡易版）
    const phonePattern = /[\d\-\(\)\s]{10,}/;
    if (!phonePattern.test(message)) {
      return `📱 正しい電話番号を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

もう一度お試しくださいね。`;
    }
    
    // 電話番号を保存して次のステップに進む
    session.data.phone = message;
    session.step = 'email_input';
    userSessions.set(userId, session);
    
    console.log(`✅ 電話番号保存: ${message}, セッション更新: phone_input → email_input`);
    
    return `📧 最後に**メールアドレス**を教えていただけますか？

例：
• example@email.com
• test123@gmail.com
• user@company.co.jp

メールアドレスをお教えください。
（必須ではありません。スキップする場合は「スキップ」とお送りください）`;
  }

  // メールアドレス入力ステップ
  function handleEmailInputStep(userId, message, session) {
    if (message.includes('やり直し')) {
      session.step = 'phone_input';
      return `📱 電話番号を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

電話番号をお教えください。`;
    }
    
    if (message.includes('スキップ') || message.includes('skip')) {
      // メールアドレスをスキップ
      session.data.email = null;
      console.log(`✅ メールアドレスをスキップ, セッション更新: email_input → personal_info`);
      
      // 個人情報入力完了、自動査定開始
      return completePersonalInfoAndStartAppraisal(userId, session);
    }
    
    // メールアドレスの形式チェック（簡易版）
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailPattern.test(message)) {
      return `📧 正しいメールアドレスを教えていただけますか？

例：
• example@email.com
• test123@gmail.com
• user@company.co.jp

もう一度お試しくださいね。
（必須ではありません。スキップする場合は「スキップ」とお送りください）`;
    }
    
    // メールアドレスを保存
    session.data.email = message;
    console.log(`✅ メールアドレス保存: ${message}, セッション更新: email_input → personal_info`);
    
    // 個人情報入力完了、自動査定開始
    return completePersonalInfoAndStartAppraisal(userId, session);
  }

  // 個人情報入力完了と査定開始
  async function completePersonalInfoAndStartAppraisal(userId, session) {
    try {
      // Supabaseに個人情報を保存
      const { supabaseAdmin } = require('./config/database');
      const { data: owner, error } = await supabaseAdmin
        .from('owners')
        .upsert({
          line_user_id: userId,
          name: session.data.name,
          phone: session.data.phone,
          email: session.data.email,
          consent_given: true,
          last_activity: new Date().toISOString()
        }, {
          onConflict: 'line_user_id'
        })
        .select()
        .single();

      if (error) {
        console.error('個人情報保存エラー:', error);
        return `❌ 申し訳ございません。個人情報の保存に失敗いたしました。

もう一度最初から入力していただけますでしょうか。
「やり直し」とお送りください。`;
      }

      console.log('✅ 個人情報を保存しました:', owner.id);
      
      // セッションに個人情報を保存
      session.data.owner_id = owner.id;
      session.step = 'result';
      
      // 自動的に査定を開始
      try {
        console.log(`🤖 自動査定開始: ${session.data.address}`);
        
        // 実際の査定APIを呼び出し
        const appraisalResult = await executeAppraisal(session.data);
        session.data.result = appraisalResult;
        userSessions.set(userId, session);
        
        return `✅ 個人情報を保存しました！

🤖 AI査定を開始いたします！

${session.data.address}の${session.data.area}㎡、築${session.data.age}年の物件を${session.data.purpose}目的で査定いたします。

しばらくお待ちくださいね...

📊 査定完了いたしました！

${appraisalResult.summary}

詳細な結果をご覧になりたい場合は「詳細表示」とお送りください。
相談予約をご希望の場合は「予約したい」とお送りください。
やり直しの場合は「やり直し」とお送りください。`;
        
      } catch (error) {
        console.error('査定エラー:', error);
        session.step = 'result';
        userSessions.set(userId, session);
        return `✅ 個人情報を保存しました！

❌ 申し訳ございません。査定処理中にエラーが発生いたしました。

もう一度査定を開始するには「やり直し」とお送りください。`;
      }
      
    } catch (error) {
      console.error('個人情報保存エラー:', error);
      return `❌ 申し訳ございません。個人情報の保存に失敗いたしました。

もう一度最初から入力していただけますでしょうか。
「やり直し」とお送りください。`;
    }
  }

  // ウェルカムメッセージ
  function getWelcomeMessage() {
    return `🏠 二宮不動産査定システムへようこそ！

不動産の価値をAIが分析し、適正価格をお答えします。

まずは簡単な質問にお答えください。
最初に「査定開始」とお送りください。

📋 査定に必要な情報：
• 住所
• 面積（㎡）
• 築年数
• 用途（売却・購入・賃貸）

何かご質問がございましたら、お気軽にお聞かせください。`;
  }

    // ウェルカムステップ
    function handleWelcomeStep(userId, message, session) {
      if (message.includes('査定開始') || message.includes('査定') || message.includes('開始')) {
        // セッションステップを確実に更新
        session.step = 'address';
        session.data = {}; // データをリセット
        userSessions.set(userId, session); // セッションを保存
        
        console.log(`✅ セッション更新: welcome → address`);
        
        return `📍 まずは物件の住所を教えていただけますか？

例：
• 東京都新宿区西新宿1-1-1
• 大阪市北区梅田1-1-1
• 横浜市西区みなとみらい1-1-1

お住まいの住所、もしくは査定したい物件の住所を教えてくださいね。`;
      }
      
      if (message.includes('予約') || message.includes('相談')) {
        return handleAppointmentRequest(userId, message);
      }

      return `査定を開始するには「査定開始」とお送りください。

または、相談予約をご希望の場合は「予約したい」とお送りください。`;
    }

    // 住所ステップ
    function handleAddressStep(userId, message, session) {
      if (message.length < 5) {
        return `📍 もう少し詳しい住所を教えていただけますか？

例：東京都新宿区西新宿1-1-1

もう少し詳しく教えていただけると、より正確な査定ができますよ。`;
      }

      // セッションデータを更新
      session.data.address = message;
      session.step = 'area';
      userSessions.set(userId, session); // セッションを保存
      
      console.log(`✅ 住所保存: ${message}, セッション更新: address → area`);
      
      return `📏 次に物件の面積を教えていただけますか？

例：
• 70㎡
• 100㎡
• 50㎡

数字だけで大丈夫です。お気軽にお答えくださいね。`;
    }

    // 面積ステップ
    function handleAreaStep(userId, message, session) {
      const area = parseInt(message);
      if (isNaN(area) || area < 10 || area > 1000) {
        return `📏 正しい面積を教えていただけますか？

例：70、100、50

10㎡〜1000㎡の範囲で、数字だけで大丈夫です。
もう一度お試しくださいね。`;
      }

      session.data.area = area;
      session.step = 'age';
      return `🏗️ 次に築年数を教えていただけますか？

例：
• 10年
• 新築
• 築20年

お住まいの築年数、もしくは築年数をお教えくださいね。`;
    }

    // 築年数ステップ
    function handleAgeStep(userId, message, session) {
      let age;
      if (message.includes('新築') || message.includes('0年')) {
        age = 0;
      } else {
        age = parseInt(message.replace(/[^0-9]/g, ''));
        if (isNaN(age) || age < 0 || age > 100) {
          return `🏗️ 正しい築年数を教えていただけますか？

例：10年、新築、築20年

もう一度お試しくださいね。`;
        }
      }

      session.data.age = age;
      session.step = 'purpose';
      return `🎯 最後に用途を教えていただけますか？

以下のいずれかからお選びください：
• 売却
• 購入
• 賃貸

どのような目的で査定をご希望でしょうか？`;
    }

    // 用途ステップ
    function handlePurposeStep(userId, message, session) {
      let purpose;
      if (message.includes('売却')) {
        purpose = '売却';
      } else if (message.includes('購入')) {
        purpose = '購入';
      } else if (message.includes('賃貸')) {
        purpose = '賃貸';
      } else {
        return `🎯 用途を正しく選択してください。

以下のいずれかをお選びください：
• 売却
• 購入
• 賃貸

用途をお教えください。`;
      }

      session.data.purpose = purpose;
      session.step = 'name_input';
      return `👤 個人情報を入力していただきますね。

まずは**お名前**を教えていただけますか？

例：
• 山田太郎
• 佐藤花子
• 田中一郎

お名前をお教えください。`;
    }

  // 個人情報入力ステップ
  async function handlePersonalInfoStep(userId, message, session) {
    if (message.includes('やり直し')) {
      session.step = 'purpose';
      return `👤 個人情報を入力してください。

例：
• 名前: 山田太郎
• 電話番号: 090-1234-5678
• メールアドレス: example@example.com

これらの情報は査定結果のみに使用され、第三者には公開されません。`;
    }

    // 個人情報の解析
    const personalInfo = parsePersonalInfo(message);
    
    if (!personalInfo.name || !personalInfo.phone) {
      return `❌ 名前と電話番号を正しく入力してください。

例：
• 名前: 山田太郎
• 電話番号: 090-1234-5678

もう一度入力してください。`;
    }

    try {
      // Supabaseに個人情報を保存
      const { supabaseAdmin } = require('./config/database');
      const { data: owner, error } = await supabaseAdmin
        .from('owners')
        .upsert({
          line_user_id: userId,
          name: personalInfo.name,
          phone: personalInfo.phone,
          email: personalInfo.email || null,
          consent_given: true,
          last_activity: new Date().toISOString()
        }, {
          onConflict: 'line_user_id'
        })
        .select()
        .single();

      if (error) {
        console.error('個人情報保存エラー:', error);
        return '❌ 個人情報の保存に失敗しました。もう一度お試しください。';
      }

      console.log('✅ 個人情報を保存しました:', owner.id);
      
      // セッションに個人情報を保存
      session.data.owner_id = owner.id;
      session.data.personalInfo = personalInfo;
      
      // 個人情報入力完了後、自動的に査定を開始
      try {
        console.log(`🤖 自動査定開始: ${session.data.address}`);
        
        // 実際の査定APIを呼び出し
        const appraisalResult = await executeAppraisal(session.data);
        session.data.result = appraisalResult;
        session.step = 'result';
        
        return `✅ 個人情報を保存しました！

🤖 AI査定を開始いたします！

${session.data.address}の${session.data.area}㎡、築${session.data.age}年の物件を${session.data.purpose}目的で査定いたします。

しばらくお待ちくださいね...

📊 査定完了いたしました！

${appraisalResult.summary}

詳細な結果をご覧になりたい場合は「詳細表示」とお送りください。
相談予約をご希望の場合は「予約したい」とお送りください。
やり直しの場合は「やり直し」とお送りください。`;
        
      } catch (error) {
        console.error('査定エラー:', error);
        session.step = 'result';
        return `✅ 個人情報を保存しました！

❌ 申し訳ございません。査定処理中にエラーが発生いたしました。

もう一度査定を開始するには「やり直し」とお送りください。`;
      }
      
    } catch (error) {
      console.error('個人情報保存エラー:', error);
      return '❌ 個人情報の保存に失敗しました。もう一度お試しください。';
    }
  }

  // 個人情報の解析
  function parsePersonalInfo(message) {
    const info = {
      name: null,
      phone: null,
      email: null
    };

    // 名前の抽出
    const nameMatch = message.match(/名前[：:]\s*([^\n\r]+)/);
    if (nameMatch) {
      info.name = nameMatch[1].trim();
    }

    // 電話番号の抽出
    const phoneMatch = message.match(/電話番号[：:]\s*([^\n\r]+)/);
    if (phoneMatch) {
      info.phone = phoneMatch[1].trim();
    }

    // メールアドレスの抽出
    const emailMatch = message.match(/メールアドレス[：:]\s*([^\n\r]+)/);
    if (emailMatch) {
      info.email = emailMatch[1].trim();
    }

    return info;
  }

    // 査定実行ステップ
    async function handleAppraisalStep(userId, message, session) {
      if (!message.includes('査定実行')) {
        return `「査定実行」とお送りください。

または、情報を修正したい場合は「やり直し」とお送りください。`;
      }

      try {
        // 実際の査定APIを呼び出し
        const appraisalResult = await executeAppraisal(session.data);
        session.data.result = appraisalResult;
        session.step = 'result';
        
        return `📊 査定完了！

${appraisalResult.summary}

詳細な結果を見るには「詳細表示」とお送りください。
相談予約をご希望の場合は「予約したい」とお送りください。
やり直しの場合は「やり直し」とお送りください。`;

      } catch (error) {
        console.error('査定エラー:', error);
        session.step = 'purpose';
        return `申し訳ございません。査定処理中にエラーが発生しました。

もう一度用途からお答えください。
用途をお教えください。`;
      }
    }

  // 査定実行（実際のAPI呼び出し）
  async function executeAppraisal(data) {
    try {
      console.log(`🤖 査定開始: ${data.address}`);
      
      // 1. 国交相APIで近傍物件データ取得
      const reinfolibData = await fetchReinfolibData(data.address);
      console.log(`📊 国交相データ取得完了: ${reinfolibData.length}件`);
      
      // 2. 近傍補正適用
      const correctedData = await applyNearbyCorrection(data, reinfolibData);
      console.log(`🔧 近傍補正完了: ${correctedData.length}件`);
      
      // 3. AI予測実行
      const aiPrediction = await executeAIPrediction(data, correctedData);
      console.log(`🤖 AI予測完了: ${aiPrediction.price_range || '価格計算中'}`);
      
      // 4. データベースに保存
      await saveAppraisalToDatabase(data, reinfolibData, correctedData, aiPrediction);
      console.log(`💾 データベース保存完了`);
      
      // 5. 結果を整形
      return formatAppraisalResult(data, reinfolibData, correctedData, aiPrediction);
      
    } catch (error) {
      console.error('査定処理エラー:', error);
      
      // エラー時は基本的な情報のみ返す
      return {
        summary: `🏠 査定結果：${data.address}

📊 推定価格：計算中...
🎯 用途：${data.purpose}
📏 面積：${data.area}㎡
🏗️ 築年数：${data.age === 0 ? '新築' : `築${data.age}年`}

申し訳ございません。詳細な査定には時間がかかります。
後ほど改めてお答えいたします。`,
        detailed: `📊 査定処理状況

🏠 物件情報
• 住所：${data.address}
• 面積：${data.area}㎡
• 築年数：${data.age === 0 ? '新築' : `築${data.age}年`}
• 用途：${data.purpose}

⚠️ 現在の状況
• 査定処理中にエラーが発生しました
• システム管理者に確認中です
• 後ほど改めて詳細な査定結果をお送りします

ご不便をおかけして申し訳ございません。`
      };
    }
  }

  // 国交相APIからデータ取得
  async function fetchReinfolibData(address) {
    try {
      const axios = require('axios');
      const apiKey = process.env.REINFOLIB_API_KEY;
      
      if (!apiKey) {
        console.log('⚠️ 国交相APIキーが設定されていません');
        return generateMockReinfolibData(address);
      }

      // 住所から都道府県コードを抽出
      const prefectureCode = extractPrefectureCode(address);
      
      // 国交相API呼び出し（XIT001: 取引価格情報）
      const response = await axios.get(
        `https://www.reinfolib.mlit.go.jp/ex-api/external/XIT001`,
        {
          params: {
            year: new Date().getFullYear(),
            area: prefectureCode,
            priceClassification: '01'
          },
          headers: {
            'Ocp-Apim-Subscription-Key': apiKey,
            'Accept': 'application/json',
            'Accept-Encoding': 'gzip'
          },
          timeout: 15000
        }
      );

      if (response.data && response.data.data) {
        return response.data.data;
      } else {
        console.log('⚠️ 国交相APIからデータが取得できませんでした');
        return generateMockReinfolibData(address);
      }
      
    } catch (error) {
      console.error('国交相API呼び出しエラー:', error.message);
      return generateMockReinfolibData(address);
    }
  }

  // モックデータ生成（住所に応じた）
  function generateMockReinfolibData(address) {
    const basePrice = getBasePriceByAddress(address);
    const mockData = [];
    
    for (let i = 0; i < 10; i++) {
      const age = Math.floor(Math.random() * 30) + 1;
      const area = Math.floor(Math.random() * 100) + 50;
      const price = Math.floor(basePrice * (area / 100) * (1 - age * 0.01) * (0.8 + Math.random() * 0.4));
      
      mockData.push({
        price: price,
        area: area,
        age: age,
        address: `${address}周辺`,
        transaction_date: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString()
      });
    }
    
    return mockData;
  }

    // 住所に応じた基本価格設定（㎡単価）
    function getBasePriceByAddress(address) {
      if (address.includes('東京都') || address.includes('東京')) {
        return 800000; // 80万円/㎡
      } else if (address.includes('大阪府') || address.includes('大阪市')) {
        return 500000; // 50万円/㎡
      } else if (address.includes('愛知県') || address.includes('名古屋市')) {
        return 400000; // 40万円/㎡
      } else if (address.includes('福岡県') || address.includes('福岡市')) {
        return 350000; // 35万円/㎡
      } else if (address.includes('広島県') || address.includes('広島市')) {
        return 150000; // 15万円/㎡（修正：20万円→15万円）
      } else if (address.includes('宮城県') || address.includes('仙台市')) {
        return 120000; // 12万円/㎡（修正：18万円→12万円）
      } else if (address.includes('北海道') || address.includes('札幌市')) {
        return 100000; // 10万円/㎡（修正：15万円→10万円）
      } else {
        return 80000; // 8万円/㎡（修正：12万円→8万円）
      }
    }

  // 都道府県コード抽出
  function extractPrefectureCode(address) {
    if (!address || typeof address !== 'string') {
      return '13'; // デフォルト：東京
    }
    
    if (address.includes('東京都') || address.includes('東京')) return '13';
    if (address.includes('大阪府') || address.includes('大阪')) return '27';
    if (address.includes('愛知県') || address.includes('名古屋')) return '23';
    if (address.includes('福岡県') || address.includes('福岡')) return '40';
    if (address.includes('広島県') || address.includes('広島')) return '34';
    if (address.includes('宮城県') || address.includes('仙台')) return '04';
    if (address.includes('北海道') || address.includes('札幌')) return '01';
    
    return '13'; // デフォルト：東京
  }

  // 近傍補正適用
  async function applyNearbyCorrection(data, reinfolibData) {
    try {
      if (!reinfolibData || reinfolibData.length === 0) {
        return [];
      }

      // 類似物件をフィルタリング
      const similarProperties = reinfolibData.filter(prop => {
        const areaDiff = Math.abs(prop.area - data.area) / data.area;
        const ageDiff = Math.abs(prop.age - data.age);
        
        return areaDiff <= 0.3 && ageDiff <= 10; // 面積30%以内、築年数10年以内
      });

      // 類似物件が見つからない場合は全件使用
      const targetProperties = similarProperties.length > 0 ? similarProperties : reinfolibData;
      
      // 価格補正計算
      return targetProperties.map(prop => {
        const areaCorrection = data.area / prop.area;
        const ageCorrection = Math.max(0.7, 1 - (data.age - prop.age) * 0.01);
        
        return {
          ...prop,
          corrected_price: Math.floor(prop.price * areaCorrection * ageCorrection),
          correction_factors: {
            area: areaCorrection,
            age: ageCorrection
          }
        };
      });
      
    } catch (error) {
      console.error('近傍補正エラー:', error);
      return reinfolibData || [];
    }
  }

  // AI予測実行
  async function executeAIPrediction(data, correctedData) {
    try {
      const axios = require('axios');
      const apiKey = process.env.OPENAI_API_KEY;
      
      if (!apiKey) {
        console.log('⚠️ OpenAI APIキーが設定されていません');
        return generateMockAIPrediction(data, correctedData);
      }

      // 特徴量抽出
      const features = extractFeatures(data, correctedData);
      
      // OpenAI API呼び出し
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: 'あなたは不動産査定の専門家です。与えられたデータを基に、現実的な価格範囲と根拠を提供してください。100㎡の物件で1億円を超える価格は現実的ではありません。'
            },
            {
              role: 'user',
              content: `以下の物件情報と近傍取引データを基に、現実的な適正価格を算出してください。

物件情報：
- 住所：${data.address}
- 面積：${data.area}㎡
- 築年数：${data.age === 0 ? '新築' : `${data.age}年`}
- 用途：${data.purpose}

近傍取引データ（${correctedData.length}件）：
${correctedData.slice(0, 5).map(prop => 
  `- ${prop.address}周辺: ${prop.corrected_price}万円 (${prop.area}㎡, 築${prop.age}年)`
).join('\n')}

特徴量：
${Object.entries(features).map(([key, value]) => `- ${key}: ${value}`).join('\n')}

**重要**: 100㎡の物件で1億円を超える価格は現実的ではありません。
以下の形式で回答してください：
{
  "price_range": "価格範囲（例：1,500万円〜2,000万円）",
  "price_per_sqm": "㎡単価（例：15万円〜20万円）",
  "market_trend": "市場動向（例：安定）",
  "confidence": "信頼度（例：中）",
  "reasoning": "根拠（例：近傍物件の平均価格と特徴量を考慮）"
}`
            }
          ],
          max_tokens: 500,
          temperature: 0.3
        },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.data && response.data.choices && response.data.choices[0]) {
        const content = response.data.choices[0].message.content;
        const parsedResult = parseAIResponse(content, data, correctedData);
        
        // 古い形式を新しい形式に変換
        const convertedResult = convertToNewFormat(parsedResult, data, correctedData);
        
        // 価格の妥当性を最終チェック
        if (convertedResult.price_high_yen > data.area * 500000) {
          console.log('⚠️ AI予測結果が現実的ではありません、モックデータを使用');
          return generateMockAIPrediction(data, correctedData);
        }
        
        return convertedResult;
      } else {
        throw new Error('AI APIレスポンスが不正です');
      }
      
    } catch (error) {
      console.error('AI予測エラー:', error.message);
      return generateMockAIPrediction(data, correctedData);
    }
  }

  // 古い形式を新しい形式に変換
  function convertToNewFormat(oldFormat, data, correctedData) {
    console.log('🔄 古い形式を新しい形式に変換中:', oldFormat);
    
    // 価格範囲から数値を抽出（より厳密な解析）
    let lowYen, highYen;
    
    if (oldFormat.price_range) {
      // パターン1: "9,500万円〜11,500万円" のような形式
      const pattern1 = oldFormat.price_range.match(/(\d+(?:,\d+)?)(?:億)?万円[〜~](\d+(?:,\d+)?)(?:億)?万円/);
      if (pattern1) {
        const low = parseFloat(pattern1[1].replace(/,/g, ''));
        const high = parseFloat(pattern1[2].replace(/,/g, ''));
        
        if (oldFormat.price_range.includes('億')) {
          lowYen = Math.round(low * 100000000);
          highYen = Math.round(high * 100000000);
        } else {
          lowYen = Math.round(low * 10000);
          highYen = Math.round(high * 10000);
        }
        console.log('✅ パターン1で解析成功:', { low, high, lowYen, highYen });
      }
      
      // パターン2: "9500万円〜11500万円" のような形式（カンマなし）
      if (!lowYen) {
        const pattern2 = oldFormat.price_range.match(/(\d+)(?:億)?万円[〜~](\d+)(?:億)?万円/);
        if (pattern2) {
          const low = parseFloat(pattern2[1]);
          const high = parseFloat(pattern2[2]);
          
          if (oldFormat.price_range.includes('億')) {
            lowYen = Math.round(low * 100000000);
            highYen = Math.round(high * 100000000);
          } else {
            lowYen = Math.round(low * 10000);
            highYen = Math.round(high * 10000);
          }
          console.log('✅ パターン2で解析成功:', { low, high, lowYen, highYen });
        }
      }
    }
    
    // 数値が抽出できない場合、または現実的でない価格の場合はモックデータを使用
    if (!lowYen || !highYen || isNaN(lowYen) || isNaN(highYen)) {
      console.log('⚠️ 価格範囲の解析に失敗、モックデータを使用');
      return generateMockAIPrediction(data, correctedData);
    }
    
    // 価格の妥当性チェック（100㎡で1億円超は異常）
    const maxReasonablePrice = data.area * 500000; // 50万円/㎡を上限とする
    if (highYen > maxReasonablePrice) {
      console.log('⚠️ 価格が現実的ではありません:', { highYen, maxReasonablePrice });
      console.log('🔄 モックデータを使用');
      return generateMockAIPrediction(data, correctedData);
    }
    
    // ㎡単価を計算
    const basePricePerSqm = getBasePriceByAddress(data.address);
    const ageFactor = data.age === 0 ? 1.2 : 
                     data.age <= 5 ? 1.15 : 
                     data.age <= 10 ? 1.1 : 
                     data.age <= 20 ? 1.0 : 
                     data.age <= 30 ? 0.9 : 0.8;
    const marketFactor = 0.9 + Math.random() * 0.2;
    const adjYenPerM2 = Math.round(basePricePerSqm * ageFactor * marketFactor);
    
    const manPerM2 = Math.round((adjYenPerM2 / 10000) * 10) / 10;
    const manPerTsubo = Math.round((adjYenPerM2 * 3.305785 / 10000) * 10) / 10;
    
    const newFormat = {
      price_low_yen: lowYen,
      price_high_yen: highYen,
      unit_man_per_m2: manPerM2,
      unit_man_per_tsubo: manPerTsubo,
      market_trend: oldFormat.market_trend || '安定',
      confidence: oldFormat.confidence || '中',
      reasoning: oldFormat.reasoning || '近傍取引の中央値と係数補正を反映',
      nearby_count: correctedData.length,
      analysis_period: '過去1年',
      radius: '2km以内',
      calculation_details: {
        base_price_per_sqm: Math.floor(basePricePerSqm / 10000),
        area_in_tsubo: data.area / 3.305785,
        age_factor: Math.round(ageFactor * 100) / 100,
        market_factor: Math.round(marketFactor * 100) / 100,
        adjusted_price_per_sqm: Math.floor(adjYenPerM2 / 10000)
      }
    };
    
    console.log('✅ 新しい形式に変換完了:', newFormat);
    return newFormat;
  }

  // AIレスポンス解析
  function parseAIResponse(content, data, correctedData) {
    try {
      // JSON部分を抽出
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          ...parsed,
          nearby_count: correctedData.length,
          analysis_period: '過去1年',
          radius: '2km以内'
        };
      }
    } catch (error) {
      console.error('AIレスポンス解析エラー:', error);
    }
    
    // パースに失敗した場合はモックデータ
    return generateMockAIPrediction(data, correctedData);
  }

  // 特徴量抽出
  function extractFeatures(data, correctedData) {
    if (!Array.isArray(correctedData) || correctedData.length === 0) {
      return {
        '近傍物件数': 0,
        '平均価格': 'データなし',
        '価格変動': 'データなし'
      };
    }

    const prices = correctedData.map(prop => prop.corrected_price || prop.price);
    const avgPrice = Math.floor(prices.reduce((a, b) => a + b, 0) / prices.length);
    const priceVariance = Math.floor(Math.sqrt(
      prices.reduce((sum, price) => sum + Math.pow(price - avgPrice, 2), 0) / prices.length
    ));

    return {
      '近傍物件数': correctedData.length,
      '平均価格': `${avgPrice}万円`,
      '価格変動': `${priceVariance}万円`,
      '面積': `${data.area}㎡`,
      '築年数': data.age === 0 ? '新築' : `${data.age}年`,
      '用途': data.purpose
    };
  }

  // データベース保存
  async function saveAppraisalToDatabase(data, reinfolibData, correctedData, aiPrediction) {
    try {
      const { supabaseAdmin } = require('./config/database');
      
      if (!supabaseAdmin) {
        console.log('⚠️ データベース接続が利用できません');
        return;
      }

      // 1. プロパティ情報保存
      const { data: property, error: propertyError } = await supabaseAdmin
        .from('properties')
        .insert({
          line_user_id: data.userId || 'unknown',
          address: data.address,
          area: data.area,
          age: data.age,
          purpose: data.purpose
        })
        .select()
        .single();

      if (propertyError) {
        console.error('プロパティ保存エラー:', propertyError);
        return;
      }

      // 2. 査定結果保存
      const { error: appraisalError } = await supabaseAdmin
        .from('appraisals')
        .insert({
          user_id: data.userId || 'unknown',
          property_id: property.id,
          reinfolib_data: reinfolibData,
          corrected_data: correctedData,
          ai_prediction: aiPrediction
        });

      if (appraisalError) {
        console.error('査定結果保存エラー:', appraisalError);
      }

      console.log('✅ データベース保存完了');
      
    } catch (error) {
      console.error('データベース保存エラー:', error);
    }
  }

      // 査定結果フォーマット（修正版）
    function formatAppraisalResult(data, reinfolibData, correctedData, aiPrediction) {
      const priceUtils = require('./utils/price-utils');
      
      console.log('🔍 表示フォーマットデバッグ開始');
      console.log('📊 aiPrediction:', aiPrediction);
      console.log('💰 価格データ:', {
        price_low_yen: aiPrediction.price_low_yen,
        price_high_yen: aiPrediction.price_high_yen,
        type_low: typeof aiPrediction.price_low_yen,
        type_high: typeof aiPrediction.price_high_yen
      });
      
      // 価格範囲を正しく表示
      const priceText = priceUtils.priceRangeText(aiPrediction.price_low_yen, aiPrediction.price_high_yen);
      console.log('🎯 フォーマット後の価格テキスト:', priceText);
      
      const summary = `🏠 査定結果：${data.address}

📊 推定価格：${priceText}
🎯 用途：${data.purpose}
📏 面積：${data.area}㎡（${priceUtils.m2ToTsubo(data.area).toFixed(2)}坪）
🏗️ 築年数：${data.age === 0 ? '新築' : `築${data.age}年`}

🤖 AI分析による査定結果です。
📊 分析対象：${reinfolibData.length}件の近傍取引データ`;

      const detailed = `📊 詳細分析結果

🏠 物件情報
• 住所：${data.address}
• 面積：${data.area}㎡（${priceUtils.m2ToTsubo(data.area).toFixed(2)}坪）
• 築年数：${data.age === 0 ? '新築' : `築${data.age}年`}
• 用途：${data.purpose}

💰 価格分析
• 推定価格：${priceText}
• ㎡単価：${aiPrediction.unit_man_per_m2}万円/㎡
• 坪単価：${aiPrediction.unit_man_per_tsubo}万円/坪
• 市場相場：${aiPrediction.market_trend}

📈 市場動向
• 価格トレンド：${aiPrediction.market_trend}
• 取引量：安定
• 需要：高

🔍 分析詳細
• 近傍物件数：${aiPrediction.nearby_count}件
• 分析期間：${aiPrediction.analysis_period}
• 分析範囲：${aiPrediction.radius}
• 信頼度：${aiPrediction.confidence}

🧮 計算根拠
• 基本㎡単価：${aiPrediction.calculation_details?.base_price_per_sqm || 'N/A'}万円/㎡
• 面積（坪）：${aiPrediction.calculation_details?.area_in_tsubo || 'N/A'}坪
• 築年数係数：${aiPrediction.calculation_details?.age_factor || 'N/A'}
• 市場係数：${aiPrediction.calculation_details?.market_factor || 'N/A'}
• 調整後㎡単価：${aiPrediction.calculation_details?.adjusted_price_per_sqm || 'N/A'}万円/㎡

🎯 アドバイス
• ${aiPrediction.reasoning}
• 適切な価格設定が重要
• 専門家への相談をお勧めします`;

      console.log('📝 最終的なsummary:', summary);
      return { summary, detailed };
    }

  // 予約リクエスト処理（既存）
  async function handleAppointmentRequest(userId, message) {
    return `📅 相談予約のご依頼ありがとうございます！

以下の方法で予約をお取りできます：

1️⃣ オンライン予約システム
2️⃣ お電話での予約
3️⃣ 店舗での直接予約

ご希望の方法をお教えください。また、ご相談内容やご希望の日時があれば、お聞かせください。`;
  }

  // 査定結果表示ステップ
  async function handleResultStep(userId, session, message) {
    if (message.includes('詳細表示')) {
      session.step = 'detailed_view';
      return `📊 詳細査定結果

${session.data.result.detailed}

次のアクションを選択してください：

1️⃣ 相談予約：「予約したい」
2️⃣ 物件改善提案：「改善提案」
3️⃣ 市場分析レポート：「市場分析」
4️⃣ フォローアップ設定：「フォローアップ」
5️⃣ やり直し：「やり直し」`;
    }
    
    if (message.includes('予約')) {
      session.step = 'appointment';
      return `📅 相談予約のご依頼ありがとうございます！

以下の方法で予約をお取りできます：

1️⃣ オンライン予約システム
2️⃣ お電話での予約
3️⃣ 店舗での直接予約

ご希望の方法をお教えください。また、ご相談内容やご希望の日時があれば、お聞かせください。`;
    }

    if (message.includes('改善提案')) {
      session.step = 'next_action';
      return `🏠 物件改善提案

${session.data.result.recommendations}

これらの改善を行うことで、物件価値の向上が期待できます。

次のアクション：
1️⃣ 相談予約：「予約したい」
2️⃣ フォローアップ設定：「フォローアップ」
3️⃣ やり直し：「やり直し」`;
    }

    if (message.includes('市場分析')) {
      session.step = 'next_action';
      return `📈 市場分析レポート

${session.data.result.market_insights}

現在の市場状況と今後の動向について分析いたしました。

次のアクション：
1️⃣ 相談予約：「予約したい」
2️⃣ フォローアップ設定：「フォローアップ」
3️⃣ やり直し：「やり直し」`;
    }

    if (message.includes('フォローアップ')) {
      session.step = 'followup_setting';
      return `⏰ フォローアップ設定

1週間以内に以下のアクションを設定できます：

1️⃣ 次回査定予定：「次回査定」
2️⃣ 市場動向レポート配信：「レポート配信」
3️⃣ 物件価値モニタリング：「価値モニタリング」
4️⃣ 相談リマインダー：「リマインダー」

どのサービスをご希望ですか？`;
    }

    return `🏠 査定結果：${session.data.address}

📊 推定価格：${session.data.result.price_range}
🎯 用途：${session.data.purpose}
📏 面積：${session.data.area}㎡
🏗️ 築年数：築${session.data.age}年

🤖 AI分析による査定結果です。
📊 分析対象：${session.data.result.nearby_count}件の近傍取引データ

次のアクションを選択してください：

• 詳細表示：「詳細表示」
• 相談予約：「予約したい」
• 物件改善提案：「改善提案」
• 市場分析レポート：「市場分析」
• フォローアップ設定：「フォローアップ」
• やり直し：「やり直し」`;
  }

  // 詳細表示ステップ
  function handleDetailedViewStep(userId, session, message) {
    if (message.includes('やり直し')) {
      session.step = 'result';
      return `📊 詳細査定結果

${session.data.result.detailed}`;
    }
    return `📊 詳細査定結果

${session.data.result.detailed}`;
  }

  // 次のアクション選択ステップ
  function handleNextActionStep(userId, session, message) {
    if (message.includes('やり直し')) {
      session.step = 'welcome';
      return getWelcomeMessage();
    }
    return `何かご質問がございましたら、お気軽にお聞かせください。

• 詳細表示：「詳細表示」
• 相談予約：「予約したい」
• やり直し：「やり直し」`;
  }

  // 予約ステップ
  function handleAppointmentStep(userId, session, message) {
    if (message.includes('やり直し')) {
      session.step = 'welcome';
      return getWelcomeMessage();
    }
    return `📅 相談予約のご依頼ありがとうございます！

以下の方法で予約をお取りできます：

1️⃣ オンライン予約システム
2️⃣ お電話での予約
3️⃣ 店舗での直接予約

ご希望の方法をお教えください。また、ご相談内容やご希望の日時があれば、お聞かせください。`;
  }

  // フォローアップ設定ステップ
  function handleFollowupSettingStep(userId, session, message) {
    if (message.includes('やり直し')) {
      session.step = 'welcome';
      return getWelcomeMessage();
    }
    return `ご質問ありがとうございます。

この査定結果はあなたの不動産に関する専門的な意見です。

もし、この査定結果についてさらに詳しく知りたいことや、
その他の質問がございましたら、お気軽にお申し付けください。

また、この査定結果をあなたのLINEプロフィールに保存して、
いつでもご確認いただけるようにしましょうか？

「はい」とお答えください。`;
  }

  // モックAI予測生成（修正版）
  function generateMockAIPrediction(data, correctedData) {
    console.log('🔍 モックAI予測生成開始');
    
    // 基本㎡単価を円で取得
    const baseYenPerM2 = getBasePriceByAddress(data.address); // 例: 150,000円/㎡
    console.log('💰 基本㎡単価（円）:', baseYenPerM2);
    
    // 築年数による減価率計算
    const ageFactor = data.age === 0 ? 1.2 : 
                     data.age <= 5 ? 1.15 : 
                     data.age <= 10 ? 1.1 : 
                     data.age <= 20 ? 1.0 : 
                     data.age <= 30 ? 0.9 : 0.8;
    console.log('🏗️ 築年数係数:', ageFactor);
    
    // 市場変動要因（0.9〜1.1）
    const marketFactor = 0.9 + Math.random() * 0.2;
    console.log('📈 市場係数:', marketFactor);
    
    // 調整後㎡単価を円で計算
    const adjYenPerM2 = Math.round(baseYenPerM2 * ageFactor * marketFactor); // 円/㎡
    console.log('🔧 調整後㎡単価（円）:', adjYenPerM2);
    
    // 総価格を円で計算
    const medianYen = adjYenPerM2 * data.area; // 円
    const lowYen = Math.round(medianYen * 0.9);
    const highYen = Math.round(medianYen * 1.1);
    console.log('💵 価格計算結果（円）:', { medianYen, lowYen, highYen });
    
    // 単価を万円で表示用に計算
    const manPerM2 = Math.round((adjYenPerM2 / 10000) * 10) / 10; // 万円/㎡
    const manPerTsubo = Math.round((adjYenPerM2 * 3.305785 / 10000) * 10) / 10; // 万円/坪
    console.log('📏 単価計算結果:', { manPerM2, manPerTsubo });
    
    const result = {
      price_low_yen: lowYen,
      price_high_yen: highYen,
      unit_man_per_m2: manPerM2,
      unit_man_per_tsubo: manPerTsubo,
      market_trend: Math.random() > 0.5 ? '上昇傾向' : '安定',
      confidence: '中',
      reasoning: '近傍取引の中央値と係数補正を反映',
      nearby_count: correctedData.length,
      analysis_period: '過去1年',
      radius: '2km以内',
      calculation_details: {
        base_price_per_sqm: Math.floor(baseYenPerM2 / 10000), // 万円/㎡に変換
        area_in_tsubo: data.area / 3.305785,
        age_factor: Math.round(ageFactor * 100) / 100,
        market_factor: Math.round(marketFactor * 100) / 100,
        adjusted_price_per_sqm: Math.floor(adjYenPerM2 / 10000)
      }
    };
    
    console.log('🎯 モックAI予測結果:', result);
    return result;
  }

  // ボタン付きメッセージ生成
  function createButtonMessage(title, text, actions) {
    return {
      type: 'template',
      altText: title,
      template: {
        type: 'buttons',
        title: title,
        text: text,
        actions: actions
      }
    };
  }

  // Flex Message生成
  function createFlexMessage(altText, contents) {
    return {
      type: 'flex',
      altText: altText,
      contents: contents
    };
  }

  // 住所選択メッセージ
  function createAddressSelectionMessage() {
    return {
      type: 'template',
      altText: '住所を選択してください',
      template: {
        type: 'buttons',
        title: '📍 住所を選択してください',
        text: '都道府県を選択するか、直接住所を入力してください',
        actions: [
          { type: 'message', label: '🏙️ 東京都', text: '東京都新宿区西新宿1-1-1' },
          { type: 'message', label: '🏙️ 大阪府', text: '大阪市北区梅田1-1-1' },
          { type: 'message', label: '🏙️ 愛知県', text: '名古屋市中区栄1-1-1' },
          { type: 'message', label: '🏙️ 福岡県', text: '福岡市博多区博多駅前1-1-1' },
          { type: 'message', label: '🏙️ 広島県', text: '広島市中区八丁堀1-1-1' }
        ]
      }
    };
  }

  // 面積選択メッセージ
  function createAreaSelectionMessage() {
    return {
      type: 'template',
      altText: '面積を選択してください',
      template: {
        type: 'buttons',
        title: '📏 面積を選択してください',
        text: 'よくある面積を選択するか、直接入力してください',
        actions: [
          { type: 'message', label: '🏠 50㎡', text: '50' },
          { type: 'message', label: '🏠 70㎡', text: '70' },
          { type: 'message', label: '🏠 100㎡', text: '100' },
          { type: 'message', label: '🏠 120㎡', text: '120' },
          { type: 'message', label: '🏠 150㎡', text: '150' }
        ]
      }
    };
  }

  // 築年数選択メッセージ
  function createAgeSelectionMessage() {
    return {
      type: 'template',
      altText: '築年数を選択してください',
      template: {
        type: 'buttons',
        title: '🏗️ 築年数を選択してください',
        text: '築年数を選択してください',
        actions: [
          { type: 'message', label: '🆕 新築', text: '新築' },
          { type: 'message', label: '🏠 築5年以内', text: '5' },
          { type: 'message', label: '🏠 築10年以内', text: '10' },
          { type: 'message', label: '🏠 築20年以内', text: '20' },
          { type: 'message', label: '🏠 築30年以内', text: '30' }
        ]
      }
    };
  }

  // 用途選択メッセージ
  function createPurposeSelectionMessage() {
    return {
      type: 'template',
      altText: '用途を選択してください',
      template: {
        type: 'buttons',
        title: '🎯 用途を選択してください',
        text: '物件の用途を選択してください',
        actions: [
          { type: 'message', label: '💰 売却', text: '売却' },
          { type: 'message', label: '🏠 購入', text: '購入' },
          { type: 'message', label: '🔑 賃貸', text: '賃貸' }
        ]
      }
    };
  }

  // 査定結果のFlex Message
  function createAppraisalResultFlexMessage(data, result) {
    return createFlexMessage(
      '査定結果',
      {
        type: 'bubble',
        size: 'kilo',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '🏠 査定完了！',
              weight: 'bold',
              size: 'lg',
              color: '#1DB446'
            }
          ]
        },
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                { type: 'text', text: '📍 住所', size: 'sm', color: '#666666', flex: 2 },
                { type: 'text', text: data.address, size: 'sm', wrap: true, flex: 3 }
              ]
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                { type: 'text', text: '📊 推定価格', size: 'sm', color: '#666666', flex: 2 },
                { type: 'text', text: result.summary.match(/推定価格：(.+)/)?.[1] || '計算中...', size: 'sm', wrap: true, flex: 3, weight: 'bold' }
              ]
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                { type: 'text', text: '📏 面積', size: 'sm', color: '#666666', flex: 2 },
                { type: 'text', text: `${data.area}㎡`, size: 'sm', flex: 3 }
              ]
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                { type: 'text', text: '🏗️ 築年数', size: 'sm', color: '#666666', flex: 2 },
                { type: 'text', text: data.age === 0 ? '新築' : `築${data.age}年`, size: 'sm', flex: 3 }
              ]
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              style: 'primary',
              action: {
                type: 'message',
                label: '📊 詳細表示',
                text: '詳細表示'
              },
              color: '#1DB446'
            },
            {
              type: 'button',
              style: 'secondary',
              action: {
                type: 'message',
                label: '📅 相談予約',
                text: '予約したい'
              }
            },
            {
              type: 'button',
              style: 'secondary',
              action: {
                type: 'message',
                label: '🔄 やり直し',
                text: 'やり直し'
              }
            }
          ]
        }
      }
    );
  }

  console.log('✅ LINE Botが有効化されました');
} else {
  console.log('⚠️ LINE Botは一時的に無効化されています（環境変数を確認）');
}

// ❹ ここから通常の body-parser を適用（/webhook には影響しない）
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// ❺ ルート
app.use('/api/auth', authRoutes);
app.use('/api/appraise', appraisalRoutes);
app.use('/api/appointment', appointmentRoutes);
app.use('/api/pdf', pdfRoutes);
app.use('/api/lead', leadRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/google', googleRoutes);

// ヘルスチェック
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    message: '二宮不動産査定システムAPI'
  });
});

// ルートの表示
function printRoutes(app, prefix = "") {
  const stack = app._router?.stack || [];
  for (const layer of stack) {
    if (layer.route) {
      const methods = Object.keys(layer.route.methods).map(m=>m.toUpperCase()).join(",");
      console.log("ROUTE:", methods, prefix + layer.route.path);
    } else if (layer.name === 'router' && layer.handle?.stack) {
      const base = layer.regexp?.fast_star || layer.regexp?.fast_slash
        ? prefix
        : prefix + (layer.regexp?.toString()
            .replace(/^\/\^\\\//, "/")
            .replace(/\\\/\?\(\?=\\\/\|\$\)\/i$/, "")
            .replace(/\\\//g, "/") || "");
      layer.handle.stack.forEach(r => {
        if (r.route) {
          const methods = Object.keys(r.route.methods).map(m=>m.toUpperCase()).join(",");
          console.log("ROUTE:", methods, base + r.route.path);
        }
      });
    }
  }
}

// ❻ 404 は最後に
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found', path: req.originalUrl });
});

// サーバー起動
app.listen(PORT, async () => {
  console.log('🚀 二宮不動産査定システムAPI サーバー起動中...');
  console.log(`📍 ポート: ${PORT}`);
  console.log(`🌍 環境: ${process.env.NODE_ENV || 'development'}`);
  console.log(`📊 ヘルスチェック: http://localhost:${PORT}/health`);
  console.log(`🤖 AI機能: http://localhost:${PORT}/api/ai/health`);

  // LINE Botのリッチメニューを設定（一時的に無効化）
  // if (lineClient) {
  //   try {
  //     await setupRichMenu();
  //   } catch (error) {
  //     console.error('❌ リッチメニュー設定エラー:', error);
  //   }
  // }

  // ルートの表示
  printRoutes(app);
});

以下のいずれかからお選びください：
• 売却
• 購入
• 賃貸

どのような目的で査定をご希望でしょうか？`;
      }
  
        if (message.length < 2) {
        return `👤 もう少し詳しいお名前を教えていただけますか？

例：山田太郎、佐藤花子

もう少し詳しく教えていただけると助かります。`;
      }
  
  // 名前を保存して次のステップに進む
  session.data.name = message;
  session.step = 'phone_input';
  userSessions.set(userId, session);
  
  console.log(`✅ 名前保存: ${message}, セッション更新: name_input → phone_input`);
  
      return `📱 次に**電話番号**を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

電話番号をお教えください。`;
}

// 電話番号入力ステップ
function handlePhoneInputStep(userId, message, session) {
  if (message.includes('やり直し')) {
    session.step = 'name_input';
    return `�� お名前を教えてください。

例：山田太郎、佐藤花子

お名前をお教えください。`;
  }
  
  // 電話番号の形式チェック（簡易版）
  const phonePattern = /[\d\-\(\)\s]{10,}/;
        if (!phonePattern.test(message)) {
        return `📱 正しい電話番号を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

もう一度お試しくださいね。`;
      }
  
  // 電話番号を保存して次のステップに進む
  session.data.phone = message;
  session.step = 'email_input';
  userSessions.set(userId, session);
  
  console.log(`✅ 電話番号保存: ${message}, セッション更新: phone_input → email_input`);
  
      return `📧 最後に**メールアドレス**を教えていただけますか？

例：
• example@email.com
• test123@gmail.com
• user@company.co.jp

メールアドレスをお教えください。
（必須ではありません。スキップする場合は「スキップ」とお送りください）`;
}

// メールアドレス入力ステップ
function handleEmailInputStep(userId, message, session) {
  if (message.includes('やり直し')) {
    session.step = 'phone_input';
    return `📱 電話番号を教えていただけますか？

例：
• 090-1234-5678
• 080-9876-5432
• 03-1234-5678

電話番号をお教えください。`;
  }
  
  if (message.includes('スキップ') || message.includes('skip')) {
    // メールアドレスをスキップ
    session.data.email = null;
    console.log(`✅ メールアドレスをスキップ, セッション更新: email_input → personal_info`);
    
    // 個人情報入力完了、自動査定開始
    return completePersonalInfoAndStartAppraisal(userId, session);
  }
  
  // メールアドレスの形式チェック（簡易版）
  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailPattern.test(message)) {
        return `📧 正しいメールアドレスを教えていただけますか？

例：
• example@email.com
• test123@gmail.com
• user@company.co.jp

もう一度お試しくださいね。
（必須ではありません。スキップする場合は「スキップ」とお送りください）`;
      }
  
  // メールアドレスを保存
  session.data.email = message;
  console.log(`✅ メールアドレス保存: ${message}, セッション更新: email_input → personal_info`);
  
  // 個人情報入力完了、自動査定開始
  return completePersonalInfoAndStartAppraisal(userId, session);
}

// 個人情報入力完了と査定開始
async function completePersonalInfoAndStartAppraisal(userId, session) {
  try {
    // Supabaseに個人情報を保存
    const { supabaseAdmin } = require('./config/database');
    const { data: owner, error } = await supabaseAdmin
      .from('owners')
      .upsert({
        line_user_id: userId,
        name: session.data.name,
        phone: session.data.phone,
        email: session.data.email,
        consent_given: true,
        last_activity: new Date().toISOString()
      }, {
        onConflict: 'line_user_id'
      })
      .select()
      .single();

    if (error) {
      console.error('個人情報保存エラー:', error);
      return `❌ 申し訳ございません。個人情報の保存に失敗いたしました。

もう一度最初から入力していただけますでしょうか。
「やり直し」とお送りください。`;
    }

    console.log('✅ 個人情報を保存しました:', owner.id);
    
    // セッションに個人情報を保存
    session.data.owner_id = owner.id;
    session.step = 'result';
    
    // 自動的に査定を開始
    try {
      console.log(`🤖 自動査定開始: ${session.data.address}`);
      
      // 実際の査定APIを呼び出し
      const appraisalResult = await executeAppraisal(session.data);
      session.data.result = appraisalResult;
      userSessions.set(userId, session);
      
      return `✅ 個人情報を保存しました！

🤖 AI査定を開始します！

${session.data.address}の${session.data.area}㎡、築${session.data.age}年の物件を${session.data.purpose}目的で査定いたします。

しばらくお待ちください...

📊 査定完了！

${appraisalResult.summary}

詳細な結果を見るには「詳細表示」とお送りください。
相談予約をご希望の場合は「予約したい」とお送りください。
やり直しの場合は「やり直し」とお送りください。`;
      
    } catch (error) {
      console.error('査定エラー:', error);
      session.step = 'result';
      userSessions.set(userId, session);
      return `✅ 個人情報を保存しました！

❌ 査定処理中にエラーが発生しました。

もう一度査定を開始するには「やり直し」とお送りください。`;
    }
    
  } catch (error) {
    console.error('個人情報保存エラー:', error);
          return `❌ 申し訳ございません。個人情報の保存に失敗いたしました。

もう一度最初から入力していただけますでしょうか。
「やり直し」とお送りください。`;
  }
}

